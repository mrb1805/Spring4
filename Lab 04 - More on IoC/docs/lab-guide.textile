h1. Lab 4. Some additional capabilities of the IoC container

h2. Lifecycle management

h3. Bean lifecycle

Any spring managed bean can receive callbacks from the container to perform initialization and cleanup operations. There are different ways to deal with it as mentioned in **slide no. 102-106**. 

Review @LifecycleBean@ , @LifecycleBean2@ and @LifecycleBean3@ class from @ex1@ package to identify different ways of managing a bean's lifecycle. Run the @LifecycleTest@ class to confirm the working of the example.

h3. Container level lifecycle extensions

**Slide no. 107-117** discusses the different ways of managing context level lifecyle operations. Going in the same order as you see in the slides, please review the Java classes from @ex2@ package one by one to understand what role they play. You need to run the @LifecycleTest@ class to see the complete lifecycle in action. Take your time and don't be in a hurry. By the time you complete this example, you should be able to easily extend the capabilities of the IoC container with the help of the different interfaces we saw.

h3. Example on RequiredAnnotationBeanPostProcessor

This is a ready to use BeanPostProcessor implementation. Start by reviewing the @BankServiceImpl@ class from @ex3@ package. As you can see we are using the _@Required_ annotation above the setter methods. So according the code, both the dependencies need to be injected or else it should throw an error. We will now test this behavior and see if is true. Run the @RequiredAnnotationTest@ class and confirm.

h3. Event model of Spring

In this example, how we can handle events raised by the IoC container as well as how to create custom events of our own. @ContextClosedListener@ from @ex4@ package shows how to handle container raised event. Refer to **slide no. 118** for details. Now to understand how to create our own event, start by reviewing @BlackListEvent@ , @EmailBean@ and @BlackListNotifier@ classes from @ex4@ package to understand the scenario. Refer to **slide no. 120-123** to understand the steps.  @ex4-config.xml@ file contains the configuration of these beans, review the configuration and see if everything is in place. To test the working, you need to run the @EventModelTest@ class.

h2. Creating Multiple Contexts

In @ex5@  package you will find the configuration for the parent and the child context both. The names of the xml files are @context-1.xml@ and @context-2.xml@. The code to create parent/child context can be found in @MultipleContextTest@ class. Review all the files and then run the test class. **Slide no. 124-127** discusses the same.  

h2. I18n support in Spring

Review @OrderProcessingService@ class from @ex6@ package  which uses the _MessageSource_ API provided by Spring for accessing resource bundles. After you have understood the code, run the @MessageSourceTest@ class to see the working of the example.

h1. Exercise 3. JUnit support in Spring

@SampleBeanTest@  from @ex7@ package shows how we have been writing test cases till now and @SampleBeanTest2@ shows the better way of doing the same. Review both the classes and test the working to confirm.

h1. Conclusion

So in  small lab, we saw many additional capabilities of Spring framework. So let's conclude with our exploration of the IoC container and the core Spring capabilities. We have seen most of the options by now and i am sure you have a very good understanding of the framework. In our next lab, we will take up AOP.

