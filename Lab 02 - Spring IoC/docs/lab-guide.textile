
h1. Lab 2: Exploring Spring IoC

h1. Introduction

In this lab we will try completing different possible ways of managing dependencies between objects. Also we will discuss about custom factory implementations for creating bean instances.

h1. Exercise 1. Inheritance configuration

As obvious, most components we develop will have a base class for sharing common behavior across the hierarchy. You can have a look at @BaseRepository@ class in the @ex1@ package. The @FlightRepositoryImpl@ class from the @ex1@ package extends this class. Now we don't need to inject the DataSource in each and every _repository_ class just because of inheritance. Before you test this code, open @ex1-config.xml@ file from the @ex1@ package and complete @TODO 1@ by referring to **slide no. 41**. 

Now run the @FlightRepositoryTest@ class from the @ex1@ package and see if the configuration is working or not. Also i have shared the annotation equivalent example for the same in the same @ex1@ package, do try out.

h1. Exercise 2. Static factory method

Review @ClientService@ class from the @ex2@ package and see if you are clear with the bean structure. It has a static method which creates and returns an instance of the same class. The reason to configure such a class in Spring would be to inject this bean in other beans without others having any knowledge about how the instance was created. Open @ex2-config.xml@ file from the @ex2@ package and complete @TODO 2@ by referring to **slide no. 43**.

Run the @ClientServiceTest@ class to see if the configuration is working.

h1. Writing custom factory class

h2. Exercise 3. Writing a factory class without using Spring API

Review @MyServiceLocator@ class from @ex3@ package which is acting as a custom factory bean. Open @ex3-config.xml@ file and complete @TODO 3@ by referring to **slide no. 46**. Run the test class to confirm the same.

Try passing parameters to the factory method from xml as well as the code by referring to **slide no. 47-48**.

h2. Exercise 4. Using the FactoryBean interface for writing a factory class

You can have a look at the modified version of @MyServiceLocator@ class from the @ex4@ package. To test this factory class, you will have to edit the @ex4-config.xml@ file and complete @TODO 4@ by referring to **slide no. 51**.

h1. Using Spring API for managing dependencies

h2. Exercise 5. Using ApplicationContextAware interface for accessing another bean

Any spring managed bean can communicate with the IoC container by implementing this interface. We will see how to use this strategy to dynamically access the target bean. This time you don't need to complete any _TODOs_, so please review the code correctly step by step and then run the test class. The main class in this example is @CustomerServiceImpl@ from the @ex5@ package. Refer to **slide no. 52** for details. Now have a look at @ex5-config.xml@ file to understand the configuration. If you see the @payBill@ method of @CustomerServiceImpl@ class carefully, what will happen is, everytime this method will be called, it will end up calling getBean to retrieve an instance of BillPaymentService bean according to the xml configuration.

Run the @CustomerServiceTest@ class to verify the same. Add your own asserts/println wherever you like to debug the code further if required.

h1. Examples on using different namespaces provided by Spring

h2. Example on util namespace

In this example we will see how to inject a Properties object in our bean class. Start by having a look at @SomeServiceClass@ from @ex6@ package. Open @ex6-config-1.xml@ which contains the required configuration. Refer to **slides no. 58-59** to understand the configuration. Complete @TODO 5@ by injecting the properties object.

Run the @SomeServiceClassTest@ class and see if everything is working. 

h2. Example on p namespace

p namespace was introduced to make it easy to set the properties of a bean whereby reducing the xml metadata. Till now the only option to set a property of the bean class was to use @<property>@ tag. Refer @db-config-1.xml@ file from @ex6@ package to pick up the new way of configuration. To test whether the DataSource has been created successfully or not, run the @DataSourceTest@ class and verify the same.

Now we will try injecting the DataSource in one of our beans using the p namespace instead of the property tag. You will find @FlightRepositoryImpl@ class in the @ex6@ package and the xml file containing the partial configuration is @ex6-config-2.xml@ file. Complete @TODO 6@ by referring to **slide no. 64** to inject a DataSource using the p namespace. 
Run the @FlightRepositoryTest@ to test the configuration.

h2. Example on context namespace

@db-config-2.xml@ file contains an example on context namespace. Refer to **slide no. 65-68** for details. To test whether the DataSource gets the correct property values, edit the name of the xml file in @DataSourceTest@ class and run it.

@db-config-3.xml@ file contains one more example on using context namespace. Refer to **slide no. 69-71** for details. Once again reuse the same test class @DataSourceTest@, edit the xml filename and see if it works.

h1. Conclusion

As you can see, Spring framework has matured a lot over these years and provides us with a range of options for solving a given requirement. Also we saw some examples demonstrating the benefits of using namespaces in our xml metadata. In the next lab, we will cover new features of Spring 3 and 4.
